/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TokenDistributorInterface extends utils.Interface {
  functions: {
    "NUMBER_PERIODS()": FunctionFragment;
    "PRECISION_FACTOR()": FunctionFragment;
    "START_BLOCK()": FunctionFragment;
    "accTokenPerShare()": FunctionFragment;
    "calculatePendingRewards(address)": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "endBlock()": FunctionFragment;
    "harvestAndCompound()": FunctionFragment;
    "lastRewardBlock()": FunctionFragment;
    "mintedToken()": FunctionFragment;
    "rewardPerBlockForOthers()": FunctionFragment;
    "rewardPerBlockForStaking()": FunctionFragment;
    "stakingPeriod(uint256)": FunctionFragment;
    "tokenSplitter()": FunctionFragment;
    "totalAmountStaked()": FunctionFragment;
    "updatePool()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NUMBER_PERIODS"
      | "PRECISION_FACTOR"
      | "START_BLOCK"
      | "accTokenPerShare"
      | "calculatePendingRewards"
      | "currentPhase"
      | "deposit"
      | "endBlock"
      | "harvestAndCompound"
      | "lastRewardBlock"
      | "mintedToken"
      | "rewardPerBlockForOthers"
      | "rewardPerBlockForStaking"
      | "stakingPeriod"
      | "tokenSplitter"
      | "totalAmountStaked"
      | "updatePool"
      | "userInfo"
      | "withdraw"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "NUMBER_PERIODS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRECISION_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "START_BLOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accTokenPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePendingRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "endBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestAndCompound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerBlockForOthers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerBlockForStaking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSplitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmountStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "NUMBER_PERIODS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "START_BLOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accTokenPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestAndCompound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerBlockForOthers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerBlockForStaking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenSplitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmountStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "Compound(address,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "NewRewardsPerBlock(uint256,uint256,uint256,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Compound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRewardsPerBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface CompoundEventObject {
  user: string;
  harvestedAmount: BigNumber;
}
export type CompoundEvent = TypedEvent<
  [string, BigNumber],
  CompoundEventObject
>;

export type CompoundEventFilter = TypedEventFilter<CompoundEvent>;

export interface DepositEventObject {
  user: string;
  amount: BigNumber;
  harvestedAmount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface NewRewardsPerBlockEventObject {
  currentPhase: BigNumber;
  startBlock: BigNumber;
  rewardPerBlockForStaking: BigNumber;
  rewardPerBlockForOthers: BigNumber;
}
export type NewRewardsPerBlockEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  NewRewardsPerBlockEventObject
>;

export type NewRewardsPerBlockEventFilter =
  TypedEventFilter<NewRewardsPerBlockEvent>;

export interface WithdrawEventObject {
  user: string;
  amount: BigNumber;
  harvestedAmount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface TokenDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NUMBER_PERIODS(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    START_BLOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    accTokenPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculatePendingRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentPhase(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    harvestAndCompound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintedToken(overrides?: CallOverrides): Promise<[string]>;

    rewardPerBlockForOthers(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerBlockForStaking(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakingPeriod(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewardPerBlockForStaking: BigNumber;
        rewardPerBlockForOthers: BigNumber;
        periodLengthInBlock: BigNumber;
      }
    >;

    tokenSplitter(overrides?: CallOverrides): Promise<[string]>;

    totalAmountStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    updatePool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  NUMBER_PERIODS(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  START_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

  accTokenPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  calculatePendingRewards(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endBlock(overrides?: CallOverrides): Promise<BigNumber>;

  harvestAndCompound(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

  mintedToken(overrides?: CallOverrides): Promise<string>;

  rewardPerBlockForOthers(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerBlockForStaking(overrides?: CallOverrides): Promise<BigNumber>;

  stakingPeriod(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rewardPerBlockForStaking: BigNumber;
      rewardPerBlockForOthers: BigNumber;
      periodLengthInBlock: BigNumber;
    }
  >;

  tokenSplitter(overrides?: CallOverrides): Promise<string>;

  totalAmountStaked(overrides?: CallOverrides): Promise<BigNumber>;

  updatePool(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NUMBER_PERIODS(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    START_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    accTokenPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePendingRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    harvestAndCompound(overrides?: CallOverrides): Promise<void>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    mintedToken(overrides?: CallOverrides): Promise<string>;

    rewardPerBlockForOthers(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerBlockForStaking(overrides?: CallOverrides): Promise<BigNumber>;

    stakingPeriod(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewardPerBlockForStaking: BigNumber;
        rewardPerBlockForOthers: BigNumber;
        periodLengthInBlock: BigNumber;
      }
    >;

    tokenSplitter(overrides?: CallOverrides): Promise<string>;

    totalAmountStaked(overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(overrides?: CallOverrides): Promise<void>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Compound(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      harvestedAmount?: null
    ): CompoundEventFilter;
    Compound(
      user?: PromiseOrValue<string> | null,
      harvestedAmount?: null
    ): CompoundEventFilter;

    "Deposit(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      harvestedAmount?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      harvestedAmount?: null
    ): DepositEventFilter;

    "NewRewardsPerBlock(uint256,uint256,uint256,uint256)"(
      currentPhase?: PromiseOrValue<BigNumberish> | null,
      startBlock?: null,
      rewardPerBlockForStaking?: null,
      rewardPerBlockForOthers?: null
    ): NewRewardsPerBlockEventFilter;
    NewRewardsPerBlock(
      currentPhase?: PromiseOrValue<BigNumberish> | null,
      startBlock?: null,
      rewardPerBlockForStaking?: null,
      rewardPerBlockForOthers?: null
    ): NewRewardsPerBlockEventFilter;

    "Withdraw(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      harvestedAmount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      amount?: null,
      harvestedAmount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    NUMBER_PERIODS(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    START_BLOCK(overrides?: CallOverrides): Promise<BigNumber>;

    accTokenPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePendingRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endBlock(overrides?: CallOverrides): Promise<BigNumber>;

    harvestAndCompound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    mintedToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerBlockForOthers(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerBlockForStaking(overrides?: CallOverrides): Promise<BigNumber>;

    stakingPeriod(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenSplitter(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmountStaked(overrides?: CallOverrides): Promise<BigNumber>;

    updatePool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NUMBER_PERIODS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    START_BLOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accTokenPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculatePendingRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestAndCompound(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerBlockForOthers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerBlockForStaking(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakingPeriod(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenSplitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmountStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
