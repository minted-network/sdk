/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface FeeDistributorInterface extends utils.Interface {
  functions: {
    "TOTAL_SHARES()": FunctionFragment;
    "currentRewardsPerBlock()": FunctionFragment;
    "getPendingRewards()": FunctionFragment;
    "getRewardShares()": FunctionFragment;
    "lastUpdatedBlock()": FunctionFragment;
    "mintedBoost()": FunctionFragment;
    "mintedBoostShares()": FunctionFragment;
    "owner()": FunctionFragment;
    "periodEndBlock()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardDurationInBlocks()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "treasuryShares()": FunctionFragment;
    "updateMintedBoost(address)": FunctionFragment;
    "updateRewards()": FunctionFragment;
    "updateShares(uint256,uint256)": FunctionFragment;
    "updateTreasury(address)": FunctionFragment;
    "wcroToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "TOTAL_SHARES"
      | "currentRewardsPerBlock"
      | "getPendingRewards"
      | "getRewardShares"
      | "lastUpdatedBlock"
      | "mintedBoost"
      | "mintedBoostShares"
      | "owner"
      | "periodEndBlock"
      | "renounceOwnership"
      | "rewardDurationInBlocks"
      | "transferOwnership"
      | "treasury"
      | "treasuryShares"
      | "updateMintedBoost"
      | "updateRewards"
      | "updateShares"
      | "updateTreasury"
      | "wcroToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "TOTAL_SHARES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRewardsPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedBoost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedBoostShares",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodEndBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardDurationInBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasuryShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintedBoost",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateShares",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "wcroToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "TOTAL_SHARES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRewardsPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedBoostShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardDurationInBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintedBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wcroToken", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SetupMintedBoost(address)": EventFragment;
    "UpdateMintedBoost(address,address)": EventFragment;
    "UpdateShares(uint256,uint256)": EventFragment;
    "UpdateTreasury(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetupMintedBoost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMintedBoost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateShares"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTreasury"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetupMintedBoostEventObject {
  mintedBoost: string;
}
export type SetupMintedBoostEvent = TypedEvent<
  [string],
  SetupMintedBoostEventObject
>;

export type SetupMintedBoostEventFilter =
  TypedEventFilter<SetupMintedBoostEvent>;

export interface UpdateMintedBoostEventObject {
  _newMintedBoost: string;
  _oldMintedBoost: string;
}
export type UpdateMintedBoostEvent = TypedEvent<
  [string, string],
  UpdateMintedBoostEventObject
>;

export type UpdateMintedBoostEventFilter =
  TypedEventFilter<UpdateMintedBoostEvent>;

export interface UpdateSharesEventObject {
  treasuryShares: BigNumber;
  mintedBoostShares: BigNumber;
}
export type UpdateSharesEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateSharesEventObject
>;

export type UpdateSharesEventFilter = TypedEventFilter<UpdateSharesEvent>;

export interface UpdateTreasuryEventObject {
  _newTreasury: string;
  _oldTreasury: string;
}
export type UpdateTreasuryEvent = TypedEvent<
  [string, string],
  UpdateTreasuryEventObject
>;

export type UpdateTreasuryEventFilter = TypedEventFilter<UpdateTreasuryEvent>;

export interface FeeDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    TOTAL_SHARES(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentRewardsPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRewardShares(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintedBoost(overrides?: CallOverrides): Promise<[string]>;

    mintedBoostShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    periodEndBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardDurationInBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    treasuryShares(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateMintedBoost(
      _newMintedBoost: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateShares(
      _treasuryShares: PromiseOrValue<BigNumberish>,
      _mintedBoostShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wcroToken(overrides?: CallOverrides): Promise<[string]>;
  };

  TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

  currentRewardsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

  getRewardShares(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  mintedBoost(overrides?: CallOverrides): Promise<string>;

  mintedBoostShares(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  periodEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardDurationInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  treasuryShares(overrides?: CallOverrides): Promise<BigNumber>;

  updateMintedBoost(
    _newMintedBoost: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateShares(
    _treasuryShares: PromiseOrValue<BigNumberish>,
    _mintedBoostShares: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTreasury(
    _newTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wcroToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    currentRewardsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardShares(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    mintedBoost(overrides?: CallOverrides): Promise<string>;

    mintedBoostShares(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    periodEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardDurationInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    treasuryShares(overrides?: CallOverrides): Promise<BigNumber>;

    updateMintedBoost(
      _newMintedBoost: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewards(overrides?: CallOverrides): Promise<void>;

    updateShares(
      _treasuryShares: PromiseOrValue<BigNumberish>,
      _mintedBoostShares: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wcroToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetupMintedBoost(address)"(
      mintedBoost?: null
    ): SetupMintedBoostEventFilter;
    SetupMintedBoost(mintedBoost?: null): SetupMintedBoostEventFilter;

    "UpdateMintedBoost(address,address)"(
      _newMintedBoost?: null,
      _oldMintedBoost?: null
    ): UpdateMintedBoostEventFilter;
    UpdateMintedBoost(
      _newMintedBoost?: null,
      _oldMintedBoost?: null
    ): UpdateMintedBoostEventFilter;

    "UpdateShares(uint256,uint256)"(
      treasuryShares?: null,
      mintedBoostShares?: null
    ): UpdateSharesEventFilter;
    UpdateShares(
      treasuryShares?: null,
      mintedBoostShares?: null
    ): UpdateSharesEventFilter;

    "UpdateTreasury(address,address)"(
      _newTreasury?: null,
      _oldTreasury?: null
    ): UpdateTreasuryEventFilter;
    UpdateTreasury(
      _newTreasury?: null,
      _oldTreasury?: null
    ): UpdateTreasuryEventFilter;
  };

  estimateGas: {
    TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    currentRewardsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRewards(overrides?: CallOverrides): Promise<BigNumber>;

    getRewardShares(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    mintedBoost(overrides?: CallOverrides): Promise<BigNumber>;

    mintedBoostShares(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    periodEndBlock(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardDurationInBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryShares(overrides?: CallOverrides): Promise<BigNumber>;

    updateMintedBoost(
      _newMintedBoost: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateShares(
      _treasuryShares: PromiseOrValue<BigNumberish>,
      _mintedBoostShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wcroToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TOTAL_SHARES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentRewardsPerBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRewardShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdatedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintedBoost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintedBoostShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodEndBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardDurationInBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryShares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMintedBoost(
      _newMintedBoost: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateShares(
      _treasuryShares: PromiseOrValue<BigNumberish>,
      _mintedBoostShares: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wcroToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
