/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RewardsDistributorInterface extends utils.Interface {
  functions: {
    "BUFFER_ADMIN_WITHDRAW()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "TOTAL_SHARES()": FunctionFragment;
    "UPDATE_REWARD_ROLE()": FunctionFragment;
    "addPool(uint256)": FunctionFragment;
    "amountClaimedByUser(address)": FunctionFragment;
    "canClaim(address,uint256,bytes32[])": FunctionFragment;
    "claim(uint256,bytes32[])": FunctionFragment;
    "currentRewardRound()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasUserClaimedForRewardRound(uint256,address)": FunctionFragment;
    "lastPausedTimestamp()": FunctionFragment;
    "maximumAmountPerUserInCurrentTree()": FunctionFragment;
    "merkleRootOfRewardRound(uint256)": FunctionFragment;
    "merkleRootUsed(bytes32)": FunctionFragment;
    "mintedBoost()": FunctionFragment;
    "mintedToken()": FunctionFragment;
    "pauseDistribution()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardSharesToStake()": FunctionFragment;
    "rewardSharesToUser()": FunctionFragment;
    "setMintedBoost(address)": FunctionFragment;
    "stakePoolInfo(uint256)": FunctionFragment;
    "stakePoolLength()": FunctionFragment;
    "stakedPids(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalClaimed()": FunctionFragment;
    "totalReleased()": FunctionFragment;
    "unpauseDistribution()": FunctionFragment;
    "updateShareDistribution(uint256,uint256,uint256[],uint256[])": FunctionFragment;
    "updateTradingRewards(bytes32,uint256)": FunctionFragment;
    "withdrawTokenRewards(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BUFFER_ADMIN_WITHDRAW"
      | "DEFAULT_ADMIN_ROLE"
      | "TOTAL_SHARES"
      | "UPDATE_REWARD_ROLE"
      | "addPool"
      | "amountClaimedByUser"
      | "canClaim"
      | "claim"
      | "currentRewardRound"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "hasUserClaimedForRewardRound"
      | "lastPausedTimestamp"
      | "maximumAmountPerUserInCurrentTree"
      | "merkleRootOfRewardRound"
      | "merkleRootUsed"
      | "mintedBoost"
      | "mintedToken"
      | "pauseDistribution"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "rewardSharesToStake"
      | "rewardSharesToUser"
      | "setMintedBoost"
      | "stakePoolInfo"
      | "stakePoolLength"
      | "stakedPids"
      | "supportsInterface"
      | "totalClaimed"
      | "totalReleased"
      | "unpauseDistribution"
      | "updateShareDistribution"
      | "updateTradingRewards"
      | "withdrawTokenRewards"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BUFFER_ADMIN_WITHDRAW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOTAL_SHARES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_REWARD_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "amountClaimedByUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "canClaim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRewardRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserClaimedForRewardRound",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastPausedTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maximumAmountPerUserInCurrentTree",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRootOfRewardRound",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRootUsed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedBoost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSharesToStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardSharesToUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMintedBoost",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakePoolInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakePoolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakedPids",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReleased",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateShareDistribution",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTradingRewards",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokenRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BUFFER_ADMIN_WITHDRAW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOTAL_SHARES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_REWARD_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amountClaimedByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentRewardRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasUserClaimedForRewardRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPausedTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maximumAmountPerUserInCurrentTree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "merkleRootOfRewardRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "merkleRootUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardSharesToStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardSharesToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintedBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakePoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakePoolLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakedPids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateShareDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTradingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokenRewards",
    data: BytesLike
  ): Result;

  events: {
    "AddPool(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardsClaim(address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TokenWithdrawnOwner(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdateMintedBoost(address,address)": EventFragment;
    "UpdateShareDistribution(uint256,uint256)": EventFragment;
    "UpdateTradingRewards(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdrawnOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMintedBoost"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateShareDistribution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTradingRewards"): EventFragment;
}

export interface AddPoolEventObject {
  _pid: BigNumber;
}
export type AddPoolEvent = TypedEvent<[BigNumber], AddPoolEventObject>;

export type AddPoolEventFilter = TypedEventFilter<AddPoolEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RewardsClaimEventObject {
  user: string;
  rewardRound: BigNumber;
  amount: BigNumber;
}
export type RewardsClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RewardsClaimEventObject
>;

export type RewardsClaimEventFilter = TypedEventFilter<RewardsClaimEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TokenWithdrawnOwnerEventObject {
  amount: BigNumber;
}
export type TokenWithdrawnOwnerEvent = TypedEvent<
  [BigNumber],
  TokenWithdrawnOwnerEventObject
>;

export type TokenWithdrawnOwnerEventFilter =
  TypedEventFilter<TokenWithdrawnOwnerEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpdateMintedBoostEventObject {
  _newMintedBoost: string;
  _oldMintedBoost: string;
}
export type UpdateMintedBoostEvent = TypedEvent<
  [string, string],
  UpdateMintedBoostEventObject
>;

export type UpdateMintedBoostEventFilter =
  TypedEventFilter<UpdateMintedBoostEvent>;

export interface UpdateShareDistributionEventObject {
  rewardSharesToUser: BigNumber;
  rewardSharesToStake: BigNumber;
}
export type UpdateShareDistributionEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateShareDistributionEventObject
>;

export type UpdateShareDistributionEventFilter =
  TypedEventFilter<UpdateShareDistributionEvent>;

export interface UpdateTradingRewardsEventObject {
  rewardRound: BigNumber;
}
export type UpdateTradingRewardsEvent = TypedEvent<
  [BigNumber],
  UpdateTradingRewardsEventObject
>;

export type UpdateTradingRewardsEventFilter =
  TypedEventFilter<UpdateTradingRewardsEvent>;

export interface RewardsDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardsDistributorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BUFFER_ADMIN_WITHDRAW(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    TOTAL_SHARES(overrides?: CallOverrides): Promise<[BigNumber]>;

    UPDATE_REWARD_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addPool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    amountClaimedByUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canClaim(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    claim(
      amount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentRewardRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hasUserClaimedForRewardRound(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastPausedTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    maximumAmountPerUserInCurrentTree(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    merkleRootOfRewardRound(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    merkleRootUsed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintedBoost(overrides?: CallOverrides): Promise<[string]>;

    mintedToken(overrides?: CallOverrides): Promise<[string]>;

    pauseDistribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardSharesToStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardSharesToUser(overrides?: CallOverrides): Promise<[BigNumber]>;

    setMintedBoost(
      _newMintedBoost: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakePoolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { shares: BigNumber; active: boolean }>;

    stakePoolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakedPids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReleased(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpauseDistribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateShareDistribution(
      _rewardSharesToUser: PromiseOrValue<BigNumberish>,
      _rewardSharesToStake: PromiseOrValue<BigNumberish>,
      _pidsToStake: PromiseOrValue<BigNumberish>[],
      _stakeshares: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTradingRewards(
      merkleRoot: PromiseOrValue<BytesLike>,
      newMaximumAmountPerUser: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTokenRewards(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BUFFER_ADMIN_WITHDRAW(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

  UPDATE_REWARD_ROLE(overrides?: CallOverrides): Promise<string>;

  addPool(
    _pid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  amountClaimedByUser(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canClaim(
    user: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber]>;

  claim(
    amount: PromiseOrValue<BigNumberish>,
    merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentRewardRound(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasUserClaimedForRewardRound(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastPausedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  maximumAmountPerUserInCurrentTree(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  merkleRootOfRewardRound(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  merkleRootUsed(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintedBoost(overrides?: CallOverrides): Promise<string>;

  mintedToken(overrides?: CallOverrides): Promise<string>;

  pauseDistribution(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardSharesToStake(overrides?: CallOverrides): Promise<BigNumber>;

  rewardSharesToUser(overrides?: CallOverrides): Promise<BigNumber>;

  setMintedBoost(
    _newMintedBoost: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakePoolInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { shares: BigNumber; active: boolean }>;

  stakePoolLength(overrides?: CallOverrides): Promise<BigNumber>;

  stakedPids(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  totalReleased(overrides?: CallOverrides): Promise<BigNumber>;

  unpauseDistribution(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateShareDistribution(
    _rewardSharesToUser: PromiseOrValue<BigNumberish>,
    _rewardSharesToStake: PromiseOrValue<BigNumberish>,
    _pidsToStake: PromiseOrValue<BigNumberish>[],
    _stakeshares: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTradingRewards(
    merkleRoot: PromiseOrValue<BytesLike>,
    newMaximumAmountPerUser: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTokenRewards(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BUFFER_ADMIN_WITHDRAW(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_REWARD_ROLE(overrides?: CallOverrides): Promise<string>;

    addPool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    amountClaimedByUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canClaim(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    claim(
      amount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    currentRewardRound(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasUserClaimedForRewardRound(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastPausedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    maximumAmountPerUserInCurrentTree(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRootOfRewardRound(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    merkleRootUsed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintedBoost(overrides?: CallOverrides): Promise<string>;

    mintedToken(overrides?: CallOverrides): Promise<string>;

    pauseDistribution(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardSharesToStake(overrides?: CallOverrides): Promise<BigNumber>;

    rewardSharesToUser(overrides?: CallOverrides): Promise<BigNumber>;

    setMintedBoost(
      _newMintedBoost: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakePoolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { shares: BigNumber; active: boolean }>;

    stakePoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    stakedPids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalReleased(overrides?: CallOverrides): Promise<BigNumber>;

    unpauseDistribution(overrides?: CallOverrides): Promise<void>;

    updateShareDistribution(
      _rewardSharesToUser: PromiseOrValue<BigNumberish>,
      _rewardSharesToStake: PromiseOrValue<BigNumberish>,
      _pidsToStake: PromiseOrValue<BigNumberish>[],
      _stakeshares: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateTradingRewards(
      merkleRoot: PromiseOrValue<BytesLike>,
      newMaximumAmountPerUser: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokenRewards(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddPool(uint256)"(_pid?: null): AddPoolEventFilter;
    AddPool(_pid?: null): AddPoolEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RewardsClaim(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      rewardRound?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardsClaimEventFilter;
    RewardsClaim(
      user?: PromiseOrValue<string> | null,
      rewardRound?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RewardsClaimEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "TokenWithdrawnOwner(uint256)"(
      amount?: null
    ): TokenWithdrawnOwnerEventFilter;
    TokenWithdrawnOwner(amount?: null): TokenWithdrawnOwnerEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UpdateMintedBoost(address,address)"(
      _newMintedBoost?: null,
      _oldMintedBoost?: null
    ): UpdateMintedBoostEventFilter;
    UpdateMintedBoost(
      _newMintedBoost?: null,
      _oldMintedBoost?: null
    ): UpdateMintedBoostEventFilter;

    "UpdateShareDistribution(uint256,uint256)"(
      rewardSharesToUser?: null,
      rewardSharesToStake?: null
    ): UpdateShareDistributionEventFilter;
    UpdateShareDistribution(
      rewardSharesToUser?: null,
      rewardSharesToStake?: null
    ): UpdateShareDistributionEventFilter;

    "UpdateTradingRewards(uint256)"(
      rewardRound?: PromiseOrValue<BigNumberish> | null
    ): UpdateTradingRewardsEventFilter;
    UpdateTradingRewards(
      rewardRound?: PromiseOrValue<BigNumberish> | null
    ): UpdateTradingRewardsEventFilter;
  };

  estimateGas: {
    BUFFER_ADMIN_WITHDRAW(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    TOTAL_SHARES(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_REWARD_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addPool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    amountClaimedByUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canClaim(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      amount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentRewardRound(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasUserClaimedForRewardRound(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastPausedTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    maximumAmountPerUserInCurrentTree(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRootOfRewardRound(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRootUsed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintedBoost(overrides?: CallOverrides): Promise<BigNumber>;

    mintedToken(overrides?: CallOverrides): Promise<BigNumber>;

    pauseDistribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardSharesToStake(overrides?: CallOverrides): Promise<BigNumber>;

    rewardSharesToUser(overrides?: CallOverrides): Promise<BigNumber>;

    setMintedBoost(
      _newMintedBoost: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakePoolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakePoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    stakedPids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    totalReleased(overrides?: CallOverrides): Promise<BigNumber>;

    unpauseDistribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateShareDistribution(
      _rewardSharesToUser: PromiseOrValue<BigNumberish>,
      _rewardSharesToStake: PromiseOrValue<BigNumberish>,
      _pidsToStake: PromiseOrValue<BigNumberish>[],
      _stakeshares: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTradingRewards(
      merkleRoot: PromiseOrValue<BytesLike>,
      newMaximumAmountPerUser: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTokenRewards(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BUFFER_ADMIN_WITHDRAW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOTAL_SHARES(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UPDATE_REWARD_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPool(
      _pid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    amountClaimedByUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canClaim(
      user: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      amount: PromiseOrValue<BigNumberish>,
      merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentRewardRound(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasUserClaimedForRewardRound(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPausedTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maximumAmountPerUserInCurrentTree(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRootOfRewardRound(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRootUsed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintedBoost(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseDistribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardSharesToStake(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardSharesToUser(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMintedBoost(
      _newMintedBoost: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakePoolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakePoolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakedPids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalClaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReleased(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpauseDistribution(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateShareDistribution(
      _rewardSharesToUser: PromiseOrValue<BigNumberish>,
      _rewardSharesToStake: PromiseOrValue<BigNumberish>,
      _pidsToStake: PromiseOrValue<BigNumberish>[],
      _stakeshares: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTradingRewards(
      merkleRoot: PromiseOrValue<BytesLike>,
      newMaximumAmountPerUser: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokenRewards(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
