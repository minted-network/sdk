/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  LaunchpadERC20,
  LaunchpadERC20Interface,
} from "../LaunchpadERC20";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "crc20Address",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    name: "LaunchpadCRC20",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "templateId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "address",
        name: "oldCRC20Template",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newCRC20Template",
        type: "address",
      },
    ],
    name: "SetCRC20Template",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "templateId",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_totalSupply",
        type: "uint256",
      },
    ],
    name: "createCRC20Launchpad",
    outputs: [
      {
        internalType: "address",
        name: "crc20Address",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_templateId",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_crc20Template",
        type: "address",
      },
    ],
    name: "setCRC20Template",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    name: "templates",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class LaunchpadERC20__factory {
  static readonly abi = _abi;
  static createInterface(): LaunchpadERC20Interface {
    return new utils.Interface(_abi) as LaunchpadERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LaunchpadERC20 {
    return new Contract(address, _abi, signerOrProvider) as LaunchpadERC20;
  }
}
