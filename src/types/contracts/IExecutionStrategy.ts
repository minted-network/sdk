/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace OrderTypes {
  export type TakerOrderStruct = {
    isOrderAsk: PromiseOrValue<boolean>;
    taker: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    minPercentageToAsk: PromiseOrValue<BigNumberish>;
    params: PromiseOrValue<BytesLike>;
  };

  export type TakerOrderStructOutput = [
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    isOrderAsk: boolean;
    taker: string;
    price: BigNumber;
    tokenId: BigNumber;
    minPercentageToAsk: BigNumber;
    params: string;
  };

  export type MakerOrderStruct = {
    isOrderAsk: PromiseOrValue<boolean>;
    signer: PromiseOrValue<string>;
    collection: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    tokenId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    strategy: PromiseOrValue<string>;
    currency: PromiseOrValue<string>;
    nonce: PromiseOrValue<BigNumberish>;
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    minPercentageToAsk: PromiseOrValue<BigNumberish>;
    params: PromiseOrValue<BytesLike>;
    v: PromiseOrValue<BigNumberish>;
    r: PromiseOrValue<BytesLike>;
    s: PromiseOrValue<BytesLike>;
  };

  export type MakerOrderStructOutput = [
    boolean,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    string,
    string
  ] & {
    isOrderAsk: boolean;
    signer: string;
    collection: string;
    price: BigNumber;
    tokenId: BigNumber;
    amount: BigNumber;
    strategy: string;
    currency: string;
    nonce: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    minPercentageToAsk: BigNumber;
    params: string;
    v: number;
    r: string;
    s: string;
  };
}

export interface IExecutionStrategyInterface extends utils.Interface {
  functions: {
    "canExecuteTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": FunctionFragment;
    "canExecuteTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": FunctionFragment;
    "viewProtocolFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canExecuteTakerAsk"
      | "canExecuteTakerBid"
      | "viewProtocolFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canExecuteTakerAsk",
    values: [OrderTypes.TakerOrderStruct, OrderTypes.MakerOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecuteTakerBid",
    values: [OrderTypes.TakerOrderStruct, OrderTypes.MakerOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "viewProtocolFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "canExecuteTakerAsk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canExecuteTakerBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewProtocolFee",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IExecutionStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExecutionStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canExecuteTakerAsk(
      takerAsk: OrderTypes.TakerOrderStruct,
      makerBid: OrderTypes.MakerOrderStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    canExecuteTakerBid(
      takerBid: OrderTypes.TakerOrderStruct,
      makerAsk: OrderTypes.MakerOrderStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    viewProtocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  canExecuteTakerAsk(
    takerAsk: OrderTypes.TakerOrderStruct,
    makerBid: OrderTypes.MakerOrderStruct,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber, BigNumber]>;

  canExecuteTakerBid(
    takerBid: OrderTypes.TakerOrderStruct,
    makerAsk: OrderTypes.MakerOrderStruct,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber, BigNumber]>;

  viewProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    canExecuteTakerAsk(
      takerAsk: OrderTypes.TakerOrderStruct,
      makerBid: OrderTypes.MakerOrderStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    canExecuteTakerBid(
      takerBid: OrderTypes.TakerOrderStruct,
      makerAsk: OrderTypes.MakerOrderStruct,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber, BigNumber]>;

    viewProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    canExecuteTakerAsk(
      takerAsk: OrderTypes.TakerOrderStruct,
      makerBid: OrderTypes.MakerOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canExecuteTakerBid(
      takerBid: OrderTypes.TakerOrderStruct,
      makerAsk: OrderTypes.MakerOrderStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    canExecuteTakerAsk(
      takerAsk: OrderTypes.TakerOrderStruct,
      makerBid: OrderTypes.MakerOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canExecuteTakerBid(
      takerBid: OrderTypes.TakerOrderStruct,
      makerAsk: OrderTypes.MakerOrderStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewProtocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
