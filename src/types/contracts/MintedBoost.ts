/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace MintedBoostBase {
  export type StakeStruct = {
    amount: PromiseOrValue<BigNumberish>;
    poolId: PromiseOrValue<BigNumberish>;
    weightedAmount: PromiseOrValue<BigNumberish>;
    stakeTimestamp: PromiseOrValue<BigNumberish>;
    unlockTimestamp: PromiseOrValue<BigNumberish>;
    active: PromiseOrValue<boolean>;
  };

  export type StakeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    amount: BigNumber;
    poolId: BigNumber;
    weightedAmount: BigNumber;
    stakeTimestamp: BigNumber;
    unlockTimestamp: BigNumber;
    active: boolean;
  };
}

export interface MintedBoostInterface extends utils.Interface {
  functions: {
    "MAX_MULTIPLIER()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "accTokenPerShare()": FunctionFragment;
    "accWcroPerShare()": FunctionFragment;
    "activePoolMap(uint256,uint256)": FunctionFragment;
    "add(uint256,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "batchUpgrade(uint256[],uint256[])": FunctionFragment;
    "batchWithdraw(uint256[])": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "depositFor(uint256,uint256,address)": FunctionFragment;
    "disableToken(address)": FunctionFragment;
    "enableToken(address,address)": FunctionFragment;
    "feeDist()": FunctionFragment;
    "getCurrentlyStakedTokenIds(address,address)": FunctionFragment;
    "getEnabledTokens()": FunctionFragment;
    "getUserCollections()": FunctionFragment;
    "getUserInfo(address)": FunctionFragment;
    "getUserStake(address,uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "lastMtdBalance()": FunctionFragment;
    "lastRewardBlock()": FunctionFragment;
    "lastWcroBalance()": FunctionFragment;
    "mtd()": FunctionFragment;
    "multiplierRegistries(address)": FunctionFragment;
    "name()": FunctionFragment;
    "nftStakeLimit()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingMTD(address)": FunctionFragment;
    "pendingWCRO(address)": FunctionFragment;
    "poolInfo(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "set(uint256,uint256,uint256)": FunctionFragment;
    "setNftStakeLimit(uint256)": FunctionFragment;
    "stake(address,uint256[])": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenDist()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(address,uint256[])": FunctionFragment;
    "updateFeeDistributor(address)": FunctionFragment;
    "updateTokenDistributor(address)": FunctionFragment;
    "upgrade(uint256,uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "usersNftInfo(address)": FunctionFragment;
    "wcro()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_MULTIPLIER"
      | "PRECISION"
      | "accTokenPerShare"
      | "accWcroPerShare"
      | "activePoolMap"
      | "add"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "batchUpgrade"
      | "batchWithdraw"
      | "decimals"
      | "decreaseAllowance"
      | "deposit"
      | "depositFor"
      | "disableToken"
      | "enableToken"
      | "feeDist"
      | "getCurrentlyStakedTokenIds"
      | "getEnabledTokens"
      | "getUserCollections"
      | "getUserInfo"
      | "getUserStake"
      | "increaseAllowance"
      | "initialize"
      | "lastMtdBalance"
      | "lastRewardBlock"
      | "lastWcroBalance"
      | "mtd"
      | "multiplierRegistries"
      | "name"
      | "nftStakeLimit"
      | "onERC721Received"
      | "owner"
      | "pendingMTD"
      | "pendingWCRO"
      | "poolInfo"
      | "poolLength"
      | "proxiableUUID"
      | "renounceOwnership"
      | "set"
      | "setNftStakeLimit"
      | "stake"
      | "symbol"
      | "tokenDist"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "unstake"
      | "updateFeeDistributor"
      | "updateTokenDistributor"
      | "upgrade"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "userInfo"
      | "usersNftInfo"
      | "wcro"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accTokenPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accWcroPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activePoolMap",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchUpgrade",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchWithdraw",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositFor",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disableToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "feeDist", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentlyStakedTokenIds",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEnabledTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastMtdBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastWcroBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mtd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multiplierRegistries",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftStakeLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingMTD",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWCRO",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftStakeLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenDist", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeDistributor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenDistributor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "usersNftInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "wcro", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "accTokenPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accWcroPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activePoolMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "disableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeDist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentlyStakedTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnabledTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastMtdBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastWcroBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mtd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiplierRegistries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftStakeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pendingMTD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWCRO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNftStakeLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenDist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usersNftInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wcro", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddPool(uint256,uint256,uint256)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "AfterDeposit(address,uint256,uint256)": EventFragment;
    "AfterUpgrade(address,uint256,uint256)": EventFragment;
    "AfterWithdraw(address,uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Deposit(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "DisableToken(address)": EventFragment;
    "EnableToken(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "NFTDisabled(address)": EventFragment;
    "NFTEnabled(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetNftStakeLimit(uint256,uint256)": EventFragment;
    "SetPool(uint256,uint256,uint256)": EventFragment;
    "StakeNFT(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnstakeNFT(address,address,uint256)": EventFragment;
    "UpdateFeeDistributor(address,address)": EventFragment;
    "UpdateTokenDistributor(address,address)": EventFragment;
    "Upgrade(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AfterDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AfterUpgrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AfterWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisableToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnableToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTDisabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNftStakeLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakeNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFeeDistributor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTokenDistributor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgrade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AddPoolEventObject {
  poolId: BigNumber;
  multiplier: BigNumber;
  lockPeriod: BigNumber;
}
export type AddPoolEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  AddPoolEventObject
>;

export type AddPoolEventFilter = TypedEventFilter<AddPoolEvent>;

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AfterDepositEventObject {
  _user: string;
  _weightedAmount: BigNumber;
  boostAmount: BigNumber;
}
export type AfterDepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AfterDepositEventObject
>;

export type AfterDepositEventFilter = TypedEventFilter<AfterDepositEvent>;

export interface AfterUpgradeEventObject {
  _user: string;
  _weightedAmount: BigNumber;
  boostAmount: BigNumber;
}
export type AfterUpgradeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AfterUpgradeEventObject
>;

export type AfterUpgradeEventFilter = TypedEventFilter<AfterUpgradeEvent>;

export interface AfterWithdrawEventObject {
  _user: string;
  _weightedAmount: BigNumber;
  boostAmountToBurn: BigNumber;
}
export type AfterWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AfterWithdrawEventObject
>;

export type AfterWithdrawEventFilter = TypedEventFilter<AfterWithdrawEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DepositEventObject {
  user: string;
  pid: BigNumber;
  stakeId: BigNumber;
  amount: BigNumber;
  weightedAmount: BigNumber;
  unlockTimestamp: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DisableTokenEventObject {
  tokenContract: string;
}
export type DisableTokenEvent = TypedEvent<[string], DisableTokenEventObject>;

export type DisableTokenEventFilter = TypedEventFilter<DisableTokenEvent>;

export interface EnableTokenEventObject {
  tokenContract: string;
}
export type EnableTokenEvent = TypedEvent<[string], EnableTokenEventObject>;

export type EnableTokenEventFilter = TypedEventFilter<EnableTokenEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NFTDisabledEventObject {
  tokenContract: string;
}
export type NFTDisabledEvent = TypedEvent<[string], NFTDisabledEventObject>;

export type NFTDisabledEventFilter = TypedEventFilter<NFTDisabledEvent>;

export interface NFTEnabledEventObject {
  tokenContract: string;
  rarityRegistry: string;
}
export type NFTEnabledEvent = TypedEvent<
  [string, string],
  NFTEnabledEventObject
>;

export type NFTEnabledEventFilter = TypedEventFilter<NFTEnabledEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetNftStakeLimitEventObject {
  newStakeLimit: BigNumber;
  oldStakeLimit: BigNumber;
}
export type SetNftStakeLimitEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetNftStakeLimitEventObject
>;

export type SetNftStakeLimitEventFilter =
  TypedEventFilter<SetNftStakeLimitEvent>;

export interface SetPoolEventObject {
  poolId: BigNumber;
  multiplier: BigNumber;
  lockPeriod: BigNumber;
}
export type SetPoolEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  SetPoolEventObject
>;

export type SetPoolEventFilter = TypedEventFilter<SetPoolEvent>;

export interface StakeNFTEventObject {
  tokenContract: string;
  staker: string;
  tokenId: BigNumber;
}
export type StakeNFTEvent = TypedEvent<
  [string, string, BigNumber],
  StakeNFTEventObject
>;

export type StakeNFTEventFilter = TypedEventFilter<StakeNFTEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnstakeNFTEventObject {
  tokenContract: string;
  staker: string;
  tokenId: BigNumber;
}
export type UnstakeNFTEvent = TypedEvent<
  [string, string, BigNumber],
  UnstakeNFTEventObject
>;

export type UnstakeNFTEventFilter = TypedEventFilter<UnstakeNFTEvent>;

export interface UpdateFeeDistributorEventObject {
  _newFeeDistributor: string;
  _oldFeeDist: string;
}
export type UpdateFeeDistributorEvent = TypedEvent<
  [string, string],
  UpdateFeeDistributorEventObject
>;

export type UpdateFeeDistributorEventFilter =
  TypedEventFilter<UpdateFeeDistributorEvent>;

export interface UpdateTokenDistributorEventObject {
  _newTokenDistributor: string;
  _oldTokenDist: string;
}
export type UpdateTokenDistributorEvent = TypedEvent<
  [string, string],
  UpdateTokenDistributorEventObject
>;

export type UpdateTokenDistributorEventFilter =
  TypedEventFilter<UpdateTokenDistributorEvent>;

export interface UpgradeEventObject {
  user: string;
  stakeId: BigNumber;
  newPid: BigNumber;
  newWeightedAmount: BigNumber;
  newUnlockTimestamp: BigNumber;
}
export type UpgradeEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  UpgradeEventObject
>;

export type UpgradeEventFilter = TypedEventFilter<UpgradeEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawEventObject {
  user: string;
  stakeId: BigNumber;
  amount: BigNumber;
  weightedAmount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface MintedBoost extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MintedBoostInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    accTokenPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    accWcroPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    activePoolMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    add(
      _multiplier: PromiseOrValue<BigNumberish>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    batchUpgrade(
      _stakeIds: PromiseOrValue<BigNumberish>[],
      _newPids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchWithdraw(
      _stakeIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositFor(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableToken(
      _nftContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableToken(
      _nftContract: PromiseOrValue<string>,
      _multiplierRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeDist(overrides?: CallOverrides): Promise<[string]>;

    getCurrentlyStakedTokenIds(
      _user: PromiseOrValue<string>,
      _nftContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getEnabledTokens(overrides?: CallOverrides): Promise<[string[]]>;

    getUserCollections(overrides?: CallOverrides): Promise<[string[]]>;

    getUserInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, MintedBoostBase.StakeStructOutput[]]>;

    getUserStake(
      _user: PromiseOrValue<string>,
      _stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[MintedBoostBase.StakeStructOutput]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _mtd: PromiseOrValue<string>,
      _wcro: PromiseOrValue<string>,
      _tokenDist: PromiseOrValue<string>,
      _feeDist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastMtdBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRewardBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastWcroBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    mtd(overrides?: CallOverrides): Promise<[string]>;

    multiplierRegistries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nftStakeLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingMTD(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingWCRO(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        multiplier: BigNumber;
        lockPeriod: BigNumber;
        totalStaked: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _multiplier: PromiseOrValue<BigNumberish>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNftStakeLimit(
      _newNftLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      nftContract: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenDist(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      nftContract: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFeeDistributor(
      _newFeeDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTokenDistributor(
      _newTokenDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgrade(
      _stakeId: PromiseOrValue<BigNumberish>,
      _newPid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        weightedAmount: BigNumber;
        rewardDebt: BigNumber;
        croRewardDebt: BigNumber;
      }
    >;

    usersNftInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        weightedAmount: BigNumber;
        totalMultiplier: BigNumber;
      }
    >;

    wcro(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  accTokenPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  accWcroPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  activePoolMap(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  add(
    _multiplier: PromiseOrValue<BigNumberish>,
    _lockPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchUpgrade(
    _stakeIds: PromiseOrValue<BigNumberish>[],
    _newPids: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchWithdraw(
    _stakeIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    subtractedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositFor(
    _pid: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableToken(
    _nftContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableToken(
    _nftContract: PromiseOrValue<string>,
    _multiplierRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeDist(overrides?: CallOverrides): Promise<string>;

  getCurrentlyStakedTokenIds(
    _user: PromiseOrValue<string>,
    _nftContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getEnabledTokens(overrides?: CallOverrides): Promise<string[]>;

  getUserCollections(overrides?: CallOverrides): Promise<string[]>;

  getUserInfo(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, MintedBoostBase.StakeStructOutput[]]>;

  getUserStake(
    _user: PromiseOrValue<string>,
    _stakeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<MintedBoostBase.StakeStructOutput>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    addedValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _mtd: PromiseOrValue<string>,
    _wcro: PromiseOrValue<string>,
    _tokenDist: PromiseOrValue<string>,
    _feeDist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastMtdBalance(overrides?: CallOverrides): Promise<BigNumber>;

  lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

  lastWcroBalance(overrides?: CallOverrides): Promise<BigNumber>;

  mtd(overrides?: CallOverrides): Promise<string>;

  multiplierRegistries(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  nftStakeLimit(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingMTD(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingWCRO(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolInfo(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      multiplier: BigNumber;
      lockPeriod: BigNumber;
      totalStaked: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  set(
    _pid: PromiseOrValue<BigNumberish>,
    _multiplier: PromiseOrValue<BigNumberish>,
    _lockPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNftStakeLimit(
    _newNftLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    nftContract: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenDist(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    nftContract: PromiseOrValue<string>,
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFeeDistributor(
    _newFeeDistributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTokenDistributor(
    _newTokenDistributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgrade(
    _stakeId: PromiseOrValue<BigNumberish>,
    _newPid: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      weightedAmount: BigNumber;
      rewardDebt: BigNumber;
      croRewardDebt: BigNumber;
    }
  >;

  usersNftInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      weightedAmount: BigNumber;
      totalMultiplier: BigNumber;
    }
  >;

  wcro(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    accTokenPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    accWcroPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    activePoolMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    add(
      _multiplier: PromiseOrValue<BigNumberish>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchUpgrade(
      _stakeIds: PromiseOrValue<BigNumberish>[],
      _newPids: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchWithdraw(
      _stakeIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositFor(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    disableToken(
      _nftContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enableToken(
      _nftContract: PromiseOrValue<string>,
      _multiplierRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeDist(overrides?: CallOverrides): Promise<string>;

    getCurrentlyStakedTokenIds(
      _user: PromiseOrValue<string>,
      _nftContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getEnabledTokens(overrides?: CallOverrides): Promise<string[]>;

    getUserCollections(overrides?: CallOverrides): Promise<string[]>;

    getUserInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, MintedBoostBase.StakeStructOutput[]]>;

    getUserStake(
      _user: PromiseOrValue<string>,
      _stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<MintedBoostBase.StakeStructOutput>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _mtd: PromiseOrValue<string>,
      _wcro: PromiseOrValue<string>,
      _tokenDist: PromiseOrValue<string>,
      _feeDist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lastMtdBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastWcroBalance(overrides?: CallOverrides): Promise<BigNumber>;

    mtd(overrides?: CallOverrides): Promise<string>;

    multiplierRegistries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    nftStakeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingMTD(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingWCRO(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        multiplier: BigNumber;
        lockPeriod: BigNumber;
        totalStaked: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _multiplier: PromiseOrValue<BigNumberish>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftStakeLimit(
      _newNftLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      nftContract: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenDist(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      nftContract: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeDistributor(
      _newFeeDistributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenDistributor(
      _newTokenDistributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgrade(
      _stakeId: PromiseOrValue<BigNumberish>,
      _newPid: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        weightedAmount: BigNumber;
        rewardDebt: BigNumber;
        croRewardDebt: BigNumber;
      }
    >;

    usersNftInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        weightedAmount: BigNumber;
        totalMultiplier: BigNumber;
      }
    >;

    wcro(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddPool(uint256,uint256,uint256)"(
      poolId?: PromiseOrValue<BigNumberish> | null,
      multiplier?: null,
      lockPeriod?: null
    ): AddPoolEventFilter;
    AddPool(
      poolId?: PromiseOrValue<BigNumberish> | null,
      multiplier?: null,
      lockPeriod?: null
    ): AddPoolEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AfterDeposit(address,uint256,uint256)"(
      _user?: PromiseOrValue<string> | null,
      _weightedAmount?: null,
      boostAmount?: null
    ): AfterDepositEventFilter;
    AfterDeposit(
      _user?: PromiseOrValue<string> | null,
      _weightedAmount?: null,
      boostAmount?: null
    ): AfterDepositEventFilter;

    "AfterUpgrade(address,uint256,uint256)"(
      _user?: PromiseOrValue<string> | null,
      _weightedAmount?: null,
      boostAmount?: null
    ): AfterUpgradeEventFilter;
    AfterUpgrade(
      _user?: PromiseOrValue<string> | null,
      _weightedAmount?: null,
      boostAmount?: null
    ): AfterUpgradeEventFilter;

    "AfterWithdraw(address,uint256,uint256)"(
      _user?: PromiseOrValue<string> | null,
      _weightedAmount?: null,
      boostAmountToBurn?: null
    ): AfterWithdrawEventFilter;
    AfterWithdraw(
      _user?: PromiseOrValue<string> | null,
      _weightedAmount?: null,
      boostAmountToBurn?: null
    ): AfterWithdrawEventFilter;

    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Deposit(address,uint256,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      weightedAmount?: null,
      unlockTimestamp?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      pid?: PromiseOrValue<BigNumberish> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      weightedAmount?: null,
      unlockTimestamp?: null
    ): DepositEventFilter;

    "DisableToken(address)"(
      tokenContract?: PromiseOrValue<string> | null
    ): DisableTokenEventFilter;
    DisableToken(
      tokenContract?: PromiseOrValue<string> | null
    ): DisableTokenEventFilter;

    "EnableToken(address)"(
      tokenContract?: PromiseOrValue<string> | null
    ): EnableTokenEventFilter;
    EnableToken(
      tokenContract?: PromiseOrValue<string> | null
    ): EnableTokenEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NFTDisabled(address)"(
      tokenContract?: PromiseOrValue<string> | null
    ): NFTDisabledEventFilter;
    NFTDisabled(
      tokenContract?: PromiseOrValue<string> | null
    ): NFTDisabledEventFilter;

    "NFTEnabled(address,address)"(
      tokenContract?: PromiseOrValue<string> | null,
      rarityRegistry?: PromiseOrValue<string> | null
    ): NFTEnabledEventFilter;
    NFTEnabled(
      tokenContract?: PromiseOrValue<string> | null,
      rarityRegistry?: PromiseOrValue<string> | null
    ): NFTEnabledEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetNftStakeLimit(uint256,uint256)"(
      newStakeLimit?: null,
      oldStakeLimit?: null
    ): SetNftStakeLimitEventFilter;
    SetNftStakeLimit(
      newStakeLimit?: null,
      oldStakeLimit?: null
    ): SetNftStakeLimitEventFilter;

    "SetPool(uint256,uint256,uint256)"(
      poolId?: PromiseOrValue<BigNumberish> | null,
      multiplier?: null,
      lockPeriod?: null
    ): SetPoolEventFilter;
    SetPool(
      poolId?: PromiseOrValue<BigNumberish> | null,
      multiplier?: null,
      lockPeriod?: null
    ): SetPoolEventFilter;

    "StakeNFT(address,address,uint256)"(
      tokenContract?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): StakeNFTEventFilter;
    StakeNFT(
      tokenContract?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): StakeNFTEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "UnstakeNFT(address,address,uint256)"(
      tokenContract?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): UnstakeNFTEventFilter;
    UnstakeNFT(
      tokenContract?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): UnstakeNFTEventFilter;

    "UpdateFeeDistributor(address,address)"(
      _newFeeDistributor?: null,
      _oldFeeDist?: null
    ): UpdateFeeDistributorEventFilter;
    UpdateFeeDistributor(
      _newFeeDistributor?: null,
      _oldFeeDist?: null
    ): UpdateFeeDistributorEventFilter;

    "UpdateTokenDistributor(address,address)"(
      _newTokenDistributor?: null,
      _oldTokenDist?: null
    ): UpdateTokenDistributorEventFilter;
    UpdateTokenDistributor(
      _newTokenDistributor?: null,
      _oldTokenDist?: null
    ): UpdateTokenDistributorEventFilter;

    "Upgrade(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      newPid?: PromiseOrValue<BigNumberish> | null,
      newWeightedAmount?: null,
      newUnlockTimestamp?: null
    ): UpgradeEventFilter;
    Upgrade(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      newPid?: PromiseOrValue<BigNumberish> | null,
      newWeightedAmount?: null,
      newUnlockTimestamp?: null
    ): UpgradeEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "Withdraw(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      weightedAmount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      weightedAmount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    MAX_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    accTokenPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    accWcroPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    activePoolMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    add(
      _multiplier: PromiseOrValue<BigNumberish>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchUpgrade(
      _stakeIds: PromiseOrValue<BigNumberish>[],
      _newPids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchWithdraw(
      _stakeIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositFor(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableToken(
      _nftContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableToken(
      _nftContract: PromiseOrValue<string>,
      _multiplierRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeDist(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentlyStakedTokenIds(
      _user: PromiseOrValue<string>,
      _nftContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEnabledTokens(overrides?: CallOverrides): Promise<BigNumber>;

    getUserCollections(overrides?: CallOverrides): Promise<BigNumber>;

    getUserInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStake(
      _user: PromiseOrValue<string>,
      _stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _mtd: PromiseOrValue<string>,
      _wcro: PromiseOrValue<string>,
      _tokenDist: PromiseOrValue<string>,
      _feeDist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastMtdBalance(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lastWcroBalance(overrides?: CallOverrides): Promise<BigNumber>;

    mtd(overrides?: CallOverrides): Promise<BigNumber>;

    multiplierRegistries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nftStakeLimit(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingMTD(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingWCRO(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _multiplier: PromiseOrValue<BigNumberish>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNftStakeLimit(
      _newNftLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      nftContract: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDist(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      nftContract: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFeeDistributor(
      _newFeeDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTokenDistributor(
      _newTokenDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgrade(
      _stakeId: PromiseOrValue<BigNumberish>,
      _newPid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usersNftInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    wcro(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accTokenPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accWcroPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activePoolMap(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add(
      _multiplier: PromiseOrValue<BigNumberish>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchUpgrade(
      _stakeIds: PromiseOrValue<BigNumberish>[],
      _newPids: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchWithdraw(
      _stakeIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      subtractedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositFor(
      _pid: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableToken(
      _nftContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableToken(
      _nftContract: PromiseOrValue<string>,
      _multiplierRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeDist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentlyStakedTokenIds(
      _user: PromiseOrValue<string>,
      _nftContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEnabledTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserCollections(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserInfo(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStake(
      _user: PromiseOrValue<string>,
      _stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      addedValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _mtd: PromiseOrValue<string>,
      _wcro: PromiseOrValue<string>,
      _tokenDist: PromiseOrValue<string>,
      _feeDist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastMtdBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRewardBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastWcroBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mtd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiplierRegistries(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftStakeLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingMTD(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingWCRO(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    set(
      _pid: PromiseOrValue<BigNumberish>,
      _multiplier: PromiseOrValue<BigNumberish>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNftStakeLimit(
      _newNftLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      nftContract: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      nftContract: PromiseOrValue<string>,
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeDistributor(
      _newFeeDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenDistributor(
      _newTokenDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(
      _stakeId: PromiseOrValue<BigNumberish>,
      _newPid: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usersNftInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wcro(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
