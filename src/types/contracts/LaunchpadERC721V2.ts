/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface LaunchpadERC721V2Interface extends utils.Interface {
  functions: {
    "canMint(address,uint8,bytes32[])": FunctionFragment;
    "getRemainingForSale()": FunctionFragment;
    "initialize(string,string,string,uint256,address,uint256,address,uint96,address)": FunctionFragment;
    "isWhitelisted(address,uint8,bytes32[])": FunctionFragment;
    "maxSupply()": FunctionFragment;
    "mint(uint256,uint8,bytes32[])": FunctionFragment;
    "mintByERC20(uint256,uint8,bytes32[])": FunctionFragment;
    "mintCost(address,uint8,bytes32[])": FunctionFragment;
    "supportsTokenForMint()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "canMint"
      | "getRemainingForSale"
      | "initialize"
      | "isWhitelisted"
      | "maxSupply"
      | "mint"
      | "mintByERC20"
      | "mintCost"
      | "supportsTokenForMint"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "canMint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingForSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "maxSupply", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintByERC20",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintCost",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsTokenForMint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "canMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintByERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintCost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsTokenForMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {};
}

export interface LaunchpadERC721V2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LaunchpadERC721V2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    canMint(
      _user: PromiseOrValue<string>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRemainingForSale(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _defaultBaseURI: PromiseOrValue<string>,
      _maxSupply: PromiseOrValue<BigNumberish>,
      _ownerAddress: PromiseOrValue<string>,
      _mintFee: PromiseOrValue<BigNumberish>,
      _mintFeeRecipient: PromiseOrValue<string>,
      _royaltyFee: PromiseOrValue<BigNumberish>,
      _royaltyFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isWhitelisted(
      _user: PromiseOrValue<string>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _amount: PromiseOrValue<BigNumberish>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintByERC20(
      _amount: PromiseOrValue<BigNumberish>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintCost(
      _user: PromiseOrValue<string>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsTokenForMint(overrides?: CallOverrides): Promise<[string]>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  canMint(
    _user: PromiseOrValue<string>,
    _sid: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRemainingForSale(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _defaultBaseURI: PromiseOrValue<string>,
    _maxSupply: PromiseOrValue<BigNumberish>,
    _ownerAddress: PromiseOrValue<string>,
    _mintFee: PromiseOrValue<BigNumberish>,
    _mintFeeRecipient: PromiseOrValue<string>,
    _royaltyFee: PromiseOrValue<BigNumberish>,
    _royaltyFeeRecipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isWhitelisted(
    _user: PromiseOrValue<string>,
    _sid: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _amount: PromiseOrValue<BigNumberish>,
    _sid: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintByERC20(
    _amount: PromiseOrValue<BigNumberish>,
    _sid: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintCost(
    _user: PromiseOrValue<string>,
    _sid: PromiseOrValue<BigNumberish>,
    _proof: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsTokenForMint(overrides?: CallOverrides): Promise<string>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    canMint(
      _user: PromiseOrValue<string>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingForSale(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _defaultBaseURI: PromiseOrValue<string>,
      _maxSupply: PromiseOrValue<BigNumberish>,
      _ownerAddress: PromiseOrValue<string>,
      _mintFee: PromiseOrValue<BigNumberish>,
      _mintFeeRecipient: PromiseOrValue<string>,
      _royaltyFee: PromiseOrValue<BigNumberish>,
      _royaltyFeeRecipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isWhitelisted(
      _user: PromiseOrValue<string>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _amount: PromiseOrValue<BigNumberish>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintByERC20(
      _amount: PromiseOrValue<BigNumberish>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintCost(
      _user: PromiseOrValue<string>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsTokenForMint(overrides?: CallOverrides): Promise<string>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    canMint(
      _user: PromiseOrValue<string>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingForSale(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _defaultBaseURI: PromiseOrValue<string>,
      _maxSupply: PromiseOrValue<BigNumberish>,
      _ownerAddress: PromiseOrValue<string>,
      _mintFee: PromiseOrValue<BigNumberish>,
      _mintFeeRecipient: PromiseOrValue<string>,
      _royaltyFee: PromiseOrValue<BigNumberish>,
      _royaltyFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isWhitelisted(
      _user: PromiseOrValue<string>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxSupply(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _amount: PromiseOrValue<BigNumberish>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintByERC20(
      _amount: PromiseOrValue<BigNumberish>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintCost(
      _user: PromiseOrValue<string>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsTokenForMint(overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    canMint(
      _user: PromiseOrValue<string>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingForSale(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: PromiseOrValue<string>,
      _symbol: PromiseOrValue<string>,
      _defaultBaseURI: PromiseOrValue<string>,
      _maxSupply: PromiseOrValue<BigNumberish>,
      _ownerAddress: PromiseOrValue<string>,
      _mintFee: PromiseOrValue<BigNumberish>,
      _mintFeeRecipient: PromiseOrValue<string>,
      _royaltyFee: PromiseOrValue<BigNumberish>,
      _royaltyFeeRecipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      _user: PromiseOrValue<string>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _amount: PromiseOrValue<BigNumberish>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintByERC20(
      _amount: PromiseOrValue<BigNumberish>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintCost(
      _user: PromiseOrValue<string>,
      _sid: PromiseOrValue<BigNumberish>,
      _proof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsTokenForMint(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
