/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MultiplierRegistryInterface extends utils.Interface {
  functions: {
    "COMMON_MULTIPLIER()": FunctionFragment;
    "EPIC_MULTIPLIER()": FunctionFragment;
    "LEGENDARY_MULTIPLIER()": FunctionFragment;
    "MAX_MULTIPLIER()": FunctionFragment;
    "RARE_MULTIPLIER()": FunctionFragment;
    "getEffectiveStakeMultiplier(uint256,uint256)": FunctionFragment;
    "getEffectiveUnstakeMultiplier(uint256,uint256)": FunctionFragment;
    "getMultiplier(uint256)": FunctionFragment;
    "getSumMultiplier(uint256[])": FunctionFragment;
    "rarityRegistry()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "COMMON_MULTIPLIER"
      | "EPIC_MULTIPLIER"
      | "LEGENDARY_MULTIPLIER"
      | "MAX_MULTIPLIER"
      | "RARE_MULTIPLIER"
      | "getEffectiveStakeMultiplier"
      | "getEffectiveUnstakeMultiplier"
      | "getMultiplier"
      | "getSumMultiplier"
      | "rarityRegistry"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "COMMON_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EPIC_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEGENDARY_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RARE_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEffectiveStakeMultiplier",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getEffectiveUnstakeMultiplier",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSumMultiplier",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rarityRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "COMMON_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EPIC_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEGENDARY_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RARE_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEffectiveStakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEffectiveUnstakeMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSumMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rarityRegistry",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MultiplierRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiplierRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COMMON_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    EPIC_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    LEGENDARY_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    RARE_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEffectiveStakeMultiplier(
      currentMultiplier: PromiseOrValue<BigNumberish>,
      totalMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEffectiveUnstakeMultiplier(
      currentMultiplier: PromiseOrValue<BigNumberish>,
      totalMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMultiplier(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSumMultiplier(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rarityRegistry(overrides?: CallOverrides): Promise<[string]>;
  };

  COMMON_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  EPIC_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  LEGENDARY_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  RARE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  getEffectiveStakeMultiplier(
    currentMultiplier: PromiseOrValue<BigNumberish>,
    totalMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEffectiveUnstakeMultiplier(
    currentMultiplier: PromiseOrValue<BigNumberish>,
    totalMultiplier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMultiplier(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSumMultiplier(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rarityRegistry(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    COMMON_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    EPIC_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    LEGENDARY_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    RARE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    getEffectiveStakeMultiplier(
      currentMultiplier: PromiseOrValue<BigNumberish>,
      totalMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEffectiveUnstakeMultiplier(
      currentMultiplier: PromiseOrValue<BigNumberish>,
      totalMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultiplier(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSumMultiplier(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rarityRegistry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    COMMON_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    EPIC_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    LEGENDARY_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    RARE_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    getEffectiveStakeMultiplier(
      currentMultiplier: PromiseOrValue<BigNumberish>,
      totalMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEffectiveUnstakeMultiplier(
      currentMultiplier: PromiseOrValue<BigNumberish>,
      totalMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultiplier(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSumMultiplier(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rarityRegistry(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    COMMON_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    EPIC_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LEGENDARY_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RARE_MULTIPLIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEffectiveStakeMultiplier(
      currentMultiplier: PromiseOrValue<BigNumberish>,
      totalMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEffectiveUnstakeMultiplier(
      currentMultiplier: PromiseOrValue<BigNumberish>,
      totalMultiplier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultiplier(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSumMultiplier(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rarityRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
