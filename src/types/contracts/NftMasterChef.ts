/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface NftMasterChefInterface extends utils.Interface {
  functions: {
    "NFT_MASTER_CHEF_FACTORY()": FunctionFragment;
    "PRECISION_FACTOR()": FunctionFragment;
    "accTokenPerShare()": FunctionFragment;
    "deposit(uint256[])": FunctionFragment;
    "emergencyRewardWithdraw(uint256)": FunctionFragment;
    "emergencyStop()": FunctionFragment;
    "emergencyWithdraw()": FunctionFragment;
    "endTime()": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "getStakedTokenIds(address)": FunctionFragment;
    "harvest()": FunctionFragment;
    "initialize(address,address,uint256,uint256,uint256,address,uint256,address)": FunctionFragment;
    "isInitialized()": FunctionFragment;
    "lastRewardTime()": FunctionFragment;
    "lockPeriod()": FunctionFragment;
    "lockPeriodMap(uint256)": FunctionFragment;
    "nftContract()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingRewards(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "rewardsPerSecond()": FunctionFragment;
    "setStartAndEndTime(uint256,uint256)": FunctionFragment;
    "startTime()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "updateLockPeriod(uint256)": FunctionFragment;
    "updatePool()": FunctionFragment;
    "updateRewardToken(address)": FunctionFragment;
    "updateRewardsPerSecond(uint256)": FunctionFragment;
    "updateTreasury(address)": FunctionFragment;
    "withdraw(uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NFT_MASTER_CHEF_FACTORY"
      | "PRECISION_FACTOR"
      | "accTokenPerShare"
      | "deposit"
      | "emergencyRewardWithdraw"
      | "emergencyStop"
      | "emergencyWithdraw"
      | "endTime"
      | "getMultiplier"
      | "getStakedTokenIds"
      | "harvest"
      | "initialize"
      | "isInitialized"
      | "lastRewardTime"
      | "lockPeriod"
      | "lockPeriodMap"
      | "nftContract"
      | "onERC721Received"
      | "owner"
      | "pendingRewards"
      | "renounceOwnership"
      | "rewardToken"
      | "rewardsPerSecond"
      | "setStartAndEndTime"
      | "startTime"
      | "totalStaked"
      | "transferOwnership"
      | "treasury"
      | "updateLockPeriod"
      | "updatePool"
      | "updateRewardToken"
      | "updateRewardsPerSecond"
      | "updateTreasury"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "NFT_MASTER_CHEF_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRECISION_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accTokenPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRewardWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyStop",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedTokenIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRewardTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockPeriodMap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStartAndEndTime",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateLockPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardsPerSecond",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "NFT_MASTER_CHEF_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRECISION_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accTokenPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRewardWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyStop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRewardTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockPeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockPeriodMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartAndEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardsPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyRewardWithdraw(address,uint256)": EventFragment;
    "EmergencyStop(uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256)": EventFragment;
    "Harvest(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetMultiplier(uint256,uint256)": EventFragment;
    "SetStartAndEndTime(uint256,uint256)": EventFragment;
    "UpdateLockPeriod(uint256,uint256)": EventFragment;
    "UpdateRewardToken(address,address)": EventFragment;
    "UpdateRewardsPerSecond(uint256,uint256)": EventFragment;
    "UpdateTreasury(address,address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyRewardWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyStop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMultiplier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStartAndEndTime"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLockPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRewardToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRewardsPerSecond"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTreasury"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositEventObject {
  user: string;
  tokenId: BigNumber;
  unlockTime: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EmergencyRewardWithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type EmergencyRewardWithdrawEvent = TypedEvent<
  [string, BigNumber],
  EmergencyRewardWithdrawEventObject
>;

export type EmergencyRewardWithdrawEventFilter =
  TypedEventFilter<EmergencyRewardWithdrawEvent>;

export interface EmergencyStopEventObject {
  timeStamp: BigNumber;
}
export type EmergencyStopEvent = TypedEvent<
  [BigNumber],
  EmergencyStopEventObject
>;

export type EmergencyStopEventFilter = TypedEventFilter<EmergencyStopEvent>;

export interface EmergencyWithdrawEventObject {
  user: string;
  amount: BigNumber;
}
export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber],
  EmergencyWithdrawEventObject
>;

export type EmergencyWithdrawEventFilter =
  TypedEventFilter<EmergencyWithdrawEvent>;

export interface HarvestEventObject {
  user: string;
  amount: BigNumber;
}
export type HarvestEvent = TypedEvent<[string, BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetMultiplierEventObject {
  newMultiplier: BigNumber;
  oldMultiplier: BigNumber;
}
export type SetMultiplierEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetMultiplierEventObject
>;

export type SetMultiplierEventFilter = TypedEventFilter<SetMultiplierEvent>;

export interface SetStartAndEndTimeEventObject {
  startTime: BigNumber;
  endTime: BigNumber;
}
export type SetStartAndEndTimeEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetStartAndEndTimeEventObject
>;

export type SetStartAndEndTimeEventFilter =
  TypedEventFilter<SetStartAndEndTimeEvent>;

export interface UpdateLockPeriodEventObject {
  _lockPeriod: BigNumber;
  lockPeriod: BigNumber;
}
export type UpdateLockPeriodEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateLockPeriodEventObject
>;

export type UpdateLockPeriodEventFilter =
  TypedEventFilter<UpdateLockPeriodEvent>;

export interface UpdateRewardTokenEventObject {
  _rewardToken: string;
  _oldRewardToken: string;
}
export type UpdateRewardTokenEvent = TypedEvent<
  [string, string],
  UpdateRewardTokenEventObject
>;

export type UpdateRewardTokenEventFilter =
  TypedEventFilter<UpdateRewardTokenEvent>;

export interface UpdateRewardsPerSecondEventObject {
  newRewardsPerSecond: BigNumber;
  oldRewardsPerSecond: BigNumber;
}
export type UpdateRewardsPerSecondEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateRewardsPerSecondEventObject
>;

export type UpdateRewardsPerSecondEventFilter =
  TypedEventFilter<UpdateRewardsPerSecondEvent>;

export interface UpdateTreasuryEventObject {
  _newTreasury: string;
  _oldTreasury: string;
}
export type UpdateTreasuryEvent = TypedEvent<
  [string, string],
  UpdateTreasuryEventObject
>;

export type UpdateTreasuryEventFilter = TypedEventFilter<UpdateTreasuryEvent>;

export interface WithdrawEventObject {
  user: string;
  tokenId: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface NftMasterChef extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftMasterChefInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NFT_MASTER_CHEF_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    accTokenPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyRewardWithdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyStop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakedTokenIds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    harvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _nft: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _rewardsPerSecond: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _treasury: PromiseOrValue<string>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    lastRewardTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockPeriodMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nftContract(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    rewardsPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    setStartAndEndTime(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    updateLockPeriod(
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRewardToken(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRewardsPerSecond(
      _rewardsPerSecond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  NFT_MASTER_CHEF_FACTORY(overrides?: CallOverrides): Promise<string>;

  PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

  accTokenPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyRewardWithdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyStop(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  getMultiplier(
    _from: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakedTokenIds(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  harvest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _nft: PromiseOrValue<string>,
    _rewardToken: PromiseOrValue<string>,
    _rewardsPerSecond: PromiseOrValue<BigNumberish>,
    _startTime: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    _treasury: PromiseOrValue<string>,
    _lockPeriod: PromiseOrValue<BigNumberish>,
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isInitialized(overrides?: CallOverrides): Promise<boolean>;

  lastRewardTime(overrides?: CallOverrides): Promise<BigNumber>;

  lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  lockPeriodMap(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nftContract(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingRewards(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  rewardsPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  setStartAndEndTime(
    _startTime: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  updateLockPeriod(
    _lockPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRewardToken(
    _rewardToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRewardsPerSecond(
    _rewardsPerSecond: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTreasury(
    _newTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    NFT_MASTER_CHEF_FACTORY(overrides?: CallOverrides): Promise<string>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    accTokenPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyRewardWithdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyStop(overrides?: CallOverrides): Promise<void>;

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedTokenIds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    harvest(overrides?: CallOverrides): Promise<void>;

    initialize(
      _nft: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _rewardsPerSecond: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _treasury: PromiseOrValue<string>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isInitialized(overrides?: CallOverrides): Promise<boolean>;

    lastRewardTime(overrides?: CallOverrides): Promise<BigNumber>;

    lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    lockPeriodMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftContract(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    rewardsPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    setStartAndEndTime(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    updateLockPeriod(
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(overrides?: CallOverrides): Promise<void>;

    updateRewardToken(
      _rewardToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardsPerSecond(
      _rewardsPerSecond: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      tokenId?: null,
      unlockTime?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      tokenId?: null,
      unlockTime?: null
    ): DepositEventFilter;

    "EmergencyRewardWithdraw(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyRewardWithdrawEventFilter;
    EmergencyRewardWithdraw(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyRewardWithdrawEventFilter;

    "EmergencyStop(uint256)"(timeStamp?: null): EmergencyStopEventFilter;
    EmergencyStop(timeStamp?: null): EmergencyStopEventFilter;

    "EmergencyWithdraw(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;
    EmergencyWithdraw(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyWithdrawEventFilter;

    "Harvest(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): HarvestEventFilter;
    Harvest(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): HarvestEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetMultiplier(uint256,uint256)"(
      newMultiplier?: null,
      oldMultiplier?: null
    ): SetMultiplierEventFilter;
    SetMultiplier(
      newMultiplier?: null,
      oldMultiplier?: null
    ): SetMultiplierEventFilter;

    "SetStartAndEndTime(uint256,uint256)"(
      startTime?: null,
      endTime?: null
    ): SetStartAndEndTimeEventFilter;
    SetStartAndEndTime(
      startTime?: null,
      endTime?: null
    ): SetStartAndEndTimeEventFilter;

    "UpdateLockPeriod(uint256,uint256)"(
      _lockPeriod?: null,
      lockPeriod?: null
    ): UpdateLockPeriodEventFilter;
    UpdateLockPeriod(
      _lockPeriod?: null,
      lockPeriod?: null
    ): UpdateLockPeriodEventFilter;

    "UpdateRewardToken(address,address)"(
      _rewardToken?: null,
      _oldRewardToken?: null
    ): UpdateRewardTokenEventFilter;
    UpdateRewardToken(
      _rewardToken?: null,
      _oldRewardToken?: null
    ): UpdateRewardTokenEventFilter;

    "UpdateRewardsPerSecond(uint256,uint256)"(
      newRewardsPerSecond?: null,
      oldRewardsPerSecond?: null
    ): UpdateRewardsPerSecondEventFilter;
    UpdateRewardsPerSecond(
      newRewardsPerSecond?: null,
      oldRewardsPerSecond?: null
    ): UpdateRewardsPerSecondEventFilter;

    "UpdateTreasury(address,address)"(
      _newTreasury?: null,
      _oldTreasury?: null
    ): UpdateTreasuryEventFilter;
    UpdateTreasury(
      _newTreasury?: null,
      _oldTreasury?: null
    ): UpdateTreasuryEventFilter;

    "Withdraw(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      tokenId?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      tokenId?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    NFT_MASTER_CHEF_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<BigNumber>;

    accTokenPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyRewardWithdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyStop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakedTokenIds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _nft: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _rewardsPerSecond: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _treasury: PromiseOrValue<string>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    lastRewardTime(overrides?: CallOverrides): Promise<BigNumber>;

    lockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    lockPeriodMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftContract(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardsPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    setStartAndEndTime(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    updateLockPeriod(
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRewardToken(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRewardsPerSecond(
      _rewardsPerSecond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NFT_MASTER_CHEF_FACTORY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PRECISION_FACTOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accTokenPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyRewardWithdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyStop(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakedTokenIds(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _nft: PromiseOrValue<string>,
      _rewardToken: PromiseOrValue<string>,
      _rewardsPerSecond: PromiseOrValue<BigNumberish>,
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      _treasury: PromiseOrValue<string>,
      _lockPeriod: PromiseOrValue<BigNumberish>,
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRewardTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockPeriodMap(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardsPerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStartAndEndTime(
      _startTime: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateLockPeriod(
      _lockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardToken(
      _rewardToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardsPerSecond(
      _rewardsPerSecond: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTreasury(
      _newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
